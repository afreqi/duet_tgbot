import asyncio
import logging
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from datetime import datetime

# === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ===
BOT_TOKEN = "8342746290:AAHZ-hr_0kjfF5RllgXdBML8B8x4FkvtZdQ"
TARGET_CHAT_ID = -1003025877026
MENTION_USER_ID = 7492286439
TOTAL_FLATS = 264

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤ ===
logging.basicConfig(level=logging.INFO)
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

user_data = {}

# === /start ===
@dp.message(Command("start"))
async def start(message: Message):
    user_data[message.from_user.id] = {}
    today_str = datetime.today().strftime("%d.%m.%Y")
    user_data[message.from_user.id]["date"] = today_str
    await message.answer(
        f"üìÖ –î–∞—Ç–∞: {today_str}\n\nüö™ –í—ã–±–µ—Ä–∏ –ø–æ–¥—ä–µ–∑–¥:"
    )
    await select_podyezd(message)

# === –ü–æ–¥—ä–µ–∑–¥ ===
async def select_podyezd(message: Message):
    builder = InlineKeyboardBuilder()
    for p in ["1", "2", "–î–≤–æ—Ä–æ–≤–∞—è —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è"]:
        builder.button(text=p, callback_data=f"podyezd:{p}")
    builder.adjust(1)
    await message.answer("üö™ –í—ã–±–µ—Ä–∏ –ø–æ–¥—ä–µ–∑–¥:", reply_markup=builder.as_markup())

@dp.callback_query(F.data.startswith("podyezd:"))
async def podyezd_selected(callback: CallbackQuery):
    _, podyezd = callback.data.split(":")
    user_data[callback.from_user.id]["podyezd"] = podyezd
    await callback.message.edit_text(
        f"‚úÖ –ü–æ–¥—ä–µ–∑–¥: {podyezd}\n–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–π –∫–≤–∞—Ä—Ç–∏—Ä—ã (–æ—Ç 1 –¥–æ {TOTAL_FLATS}):"
    )

# === –í–≤–æ–¥ –∫–≤–∞—Ä—Ç–∏—Ä—ã —á–µ—Ä–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏–µ ===
@dp.message(F.text)
async def flat_input(message: Message):
    uid = message.from_user.id
    if uid not in user_data:
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –ø–æ–¥—ä–µ–∑–¥, –Ω–æ –µ—â—ë –Ω–µ –≤–≤—ë–ª –∫–≤–∞—Ä—Ç–∏—Ä—É
    if "podyezd" in user_data[uid] and "flat" not in user_data[uid]:
        if not message.text.isdigit():
            await message.answer(f"‚ùå –ù–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 1 –¥–æ {TOTAL_FLATS}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
            return
        flat_number = int(message.text)
        if not (1 <= flat_number <= TOTAL_FLATS):
            await message.answer(f"‚ùå –ö–≤–∞—Ä—Ç–∏—Ä–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 1 –¥–æ {TOTAL_FLATS}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
            return

        user_data[uid]["flat"] = str(flat_number)
        await message.answer("‚úÖ –ö–≤–∞—Ä—Ç–∏—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.\n–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ: –ö–∞–∫–∏–µ —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–≤–µ—Å—Ç–∏")
        return

    # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
    if "flat" in user_data[uid] and "comment" not in user_data[uid]:
        user_data[uid]["comment"] = message.text
        data = user_data[uid]
        formatted_date = data["date"]

        mention_text = f'<a href="tg://user?id={MENTION_USER_ID}">–ü–æ–ª—É—á–∞—Ç–µ–ª—å</a>'

        text = (
            f"üì© <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!</b>\n\n"
            f"üóì –î–∞—Ç–∞: {formatted_date}\n"
            f"üö™ –ü–æ–¥—ä–µ–∑–¥: {data['podyezd']}\n"
            f"üè† –ö–≤–∞—Ä—Ç–∏—Ä–∞: {data['flat']}\n"
            f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {data['comment']}\n\n"
            f"üë§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: {mention_text}"
        )

        await bot.send_message(chat_id=TARGET_CHAT_ID, text=text, parse_mode="HTML")

        builder = InlineKeyboardBuilder()
        builder.button(text="üìù –ü–æ–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É", callback_data="new_request")
        await message.answer("‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –≥—Ä—É–ø–ø—É!", reply_markup=builder.as_markup())

# === –ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É ===
@dp.callback_query(F.data == "new_request")
async def new_request(callback: CallbackQuery):
    await callback.message.edit_text("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É!")
    await start(callback.message)

# === –ó–∞–ø—É—Å–∫ ===
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())