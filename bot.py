import asyncio
import logging
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from datetime import datetime

# === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ===
BOT_TOKEN = "8342746290:AAHZ-hr_0kjfF5RllgXdBML8B8x4FkvtZdQ"
TARGET_CHAT_ID = -1002287772710
MENTION_USER_IDS = [7492286439, 7604321833]
TOTAL_FLOORS = 24

# === –õ–æ–≥–∏ ===
logging.basicConfig(level=logging.INFO)
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

user_data = {}

# === /start ===
@dp.message(Command("start"))
async def start(message: Message):
    uid = message.from_user.id
    today_str = datetime.today().strftime("%d.%m.%Y")
    user_data[uid] = {"date": today_str}

    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞")]],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await message.answer(
        f"üóì –î–∞—Ç–∞: {today_str}\n\n–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º:",
        reply_markup=keyboard
    )

# üîπ –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞
@dp.message(F.text == "üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞")
async def launch_bot(message: Message):
    await select_podyezd(message)

# === –ü–æ–¥—ä–µ–∑–¥ ===
async def select_podyezd(message: Message):
    builder = InlineKeyboardBuilder()
    for p in ["1", "2", "–î–≤–æ—Ä–æ–≤–∞—è —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è"]:
        builder.button(text=p, callback_data=f"podyezd:{p}")
    builder.adjust(1)
    await message.answer("üö™ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—ä–µ–∑–¥:", reply_markup=builder.as_markup())

@dp.callback_query(F.data.startswith("podyezd:"))
async def podyezd_selected(callback: CallbackQuery):
    uid = callback.from_user.id
    _, podyezd = callback.data.split(":")
    user_data.setdefault(uid, {"date": datetime.today().strftime("%d.%m.%Y")})
    user_data[uid]["podyezd"] = podyezd

    if podyezd in ["1", "2"]:
        await callback.message.answer(f"‚úÖ –ü–æ–¥—ä–µ–∑–¥: {podyezd}\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —ç—Ç–∞–∂:")
        await select_floor(callback.message)
    else:
        # –î–≤–æ—Ä–æ–≤–∞—è —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è ‚Üí –ø—Ä–æ–ø—É—Å–∫ —ç—Ç–∞–∂–µ–π –∏ –∫–≤–∞—Ä—Ç–∏—Ä
        user_data[uid]["expect_comment"] = True
        await callback.message.answer(f"‚úÖ –ü–æ–¥—ä–µ–∑–¥: {podyezd}\n‚úèÔ∏è –ö–∞–∫–∏–µ —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–≤–µ—Å—Ç–∏?")

# === –≠—Ç–∞–∂ ===
async def select_floor(message: Message):
    uid = message.from_user.id
    builder = InlineKeyboardBuilder()
    for i in range(1, TOTAL_FLOORS + 1):
        builder.button(text=str(i), callback_data=f"floor:{i}")
    builder.adjust(4)
    await message.answer("üè¢ –í—ã–±–µ—Ä–∏—Ç–µ —ç—Ç–∞–∂:", reply_markup=builder.as_markup())

@dp.callback_query(F.data.startswith("floor:"))
async def floor_selected(callback: CallbackQuery):
    uid = callback.from_user.id
    _, floor = callback.data.split(":")
    user_data.setdefault(uid, {"date": datetime.today().strftime("%d.%m.%Y")})
    user_data[uid]["floor"] = floor

    # –ü–æ–¥—ä–µ–∑–¥ 1 –∏–ª–∏ 2 ‚Üí –∑–∞–ø—Ä–æ—Å –Ω–æ–º–µ—Ä–∞ –∫–≤–∞—Ä—Ç–∏—Ä—ã
    user_data[uid]["expect_flat"] = True
    await callback.message.answer("‚úèÔ∏è –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã")

# === –í–≤–æ–¥ –∫–≤–∞—Ä—Ç–∏—Ä—ã –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è ===
@dp.message()
async def handle_flat_or_comment(message: Message):
    uid = message.from_user.id
    if uid not in user_data:
        return

    data = user_data[uid]

    # --- –í–≤–æ–¥ –∫–≤–∞—Ä—Ç–∏—Ä—ã ---
    if data.get("expect_flat"):
        if not message.text.isdigit():
            await message.reply("‚ùå –í–≤–æ–¥–∏—Ç—å –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –æ—Ç 1 –¥–æ 264. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return
        flat = int(message.text)
        podyezd = data["podyezd"]
        if (podyezd == "1" and not (1 <= flat <= 132)) or (podyezd == "2" and not (133 <= flat <= 264)):
            await message.reply(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã –¥–ª—è –ø–æ–¥—ä–µ–∑–¥–∞ {podyezd}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return
        data["flat"] = flat
        data["expect_flat"] = False
        data["expect_comment"] = True
        await message.reply("‚úÖ –ö–≤–∞—Ä—Ç–∏—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.\n‚úèÔ∏è –ö–∞–∫–∏–µ —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–≤–µ—Å—Ç–∏?")
        return

    # --- –í–≤–æ–¥ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è ---
    if data.get("expect_comment"):
        data["comment"] = message.text
        data["expect_comment"] = False
        await send_request_to_group(uid, message)

# === –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏ –≤ –≥—Ä—É–ø–ø—É ===
async def send_request_to_group(uid: int, message: Message):
    data = user_data[uid]
    formatted_date = data["date"]
    mentions = " ".join([f'<a href="tg://user?id={uid}">–ü–æ–ª—É—á–∞—Ç–µ–ª—å</a>' for uid in MENTION_USER_IDS])

    text = (
        f"üì© <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!</b>\n\n"
        f"üóì –î–∞—Ç–∞: {formatted_date}\n"
        f"üö™ –ü–æ–¥—ä–µ–∑–¥ (–¥–≤–æ—Ä–æ–≤–∞—è —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è): {data.get('podyezd', '-')}\n"
        + (f"üè¢ –≠—Ç–∞–∂: {data.get('floor', '-')}\n" if 'floor' in data else "")
        + (f"üè† –ö–≤–∞—Ä—Ç–∏—Ä–∞: {data.get('flat', '-')}\n" if 'flat' in data else "")
        + f"üí¨ –ö–∞–∫–∏–µ —Ä–∞–±–æ—Ç—ã –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Å—Ç–∏: {data.get('comment', '-')}\n\n"
        f"üë§ –ü–æ–ª—É—á–∞—Ç–µ–ª–∏: {mentions}"
    )

    await bot.send_message(chat_id=TARGET_CHAT_ID, text=text, parse_mode="HTML")

    # –ö–Ω–æ–ø–∫–∞ "–Ω–æ–≤–∞—è –∑–∞—è–≤–∫–∞"
    builder = InlineKeyboardBuilder()
    builder.button(text="üìù –ü–æ–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É", callback_data="new_request")
    await message.answer("‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –≥—Ä—É–ø–ø—É!", reply_markup=builder.as_markup())

@dp.callback_query(F.data == "new_request")
async def new_request(callback: CallbackQuery):
    await callback.message.answer("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É!")
    await start(callback.message)

# === –ó–∞–ø—É—Å–∫ ===
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
